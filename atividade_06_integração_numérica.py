# -*- coding: utf-8 -*-
"""Atividade 06 - Integra√ß√£o Num√©rica

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jHm8_UtF-9NZ_IRGEzM6OTMF_STwUxt2

# C√°lculo da Integral $$\int_{0}^{1} e^{-x^2} \, dx$$ com Regra dos Trap√©zios

---

## üìà **Passo 1: Determina√ß√£o do N√∫mero de Subintervalos ($$n$$)**

### **F√≥rmula do Erro M√°ximo**
$$
E \leq \frac{(b-a)^3}{12n^2} \cdot \max_{x \in [a,b]} |f''(x)|
$$

### **Procedimento Detalhado**
1. **Segunda derivada de $$f(x) = e^{-x^2}$$**:
   $$
   f''(x) = (4x^2 - 2)e^{-x^2}
   $$

2. **M√°ximo de $$|f''(x)|$$ em $$$$**:
   - Em $$x = 0$$: $$|f''(0)| = 2$$
   - Em $$x = 1$$: $$|f''(1)| \approx 0.735$$
   - **M√°ximo absoluto**: $$\max |f''(x)| = 2$$.

3. **C√°lculo de $$n$$ m√≠nimo**:
   $$
   \frac{1}{6n^2} \leq \frac{1}{6} \times 10^{-4} \implies n^2 \geq 10^4 \implies n \geq 100
   $$
   **Resultado**: $$n_{\text{m√≠n}} = 100$$.

---

## üíª **Passo 2: Implementa√ß√£o em Python**


### **Explica√ß√£o do C√≥digo**
| **Componente**         | **Matematicamente**                     | **No C√≥digo**               |
|-------------------------|-----------------------------------------|------------------------------|
| **Subintervalos**       | $$n = 100$$                             | `n = 100`                    |
| **Passo (h)**           | $$h = \frac{1}{100} = 0.01$$           | `h = (b - a)/n`              |
| **Pontos amostrados**   | $$x_i = 0 + ih$$                       | `x = np.linspace(a, b, n+1)` |
| **Soma ponderada**      | $$2\sum_{i=1}^{99} f(x_i)$$            | Loop `for i in range(1, n)`  |
| **Fator de ajuste**     | $$\frac{h}{2}$$                        | `integral *= h / 2`          |

---

## ‚úÖ **Resultado e Verifica√ß√£o**
- **Sa√≠da do c√≥digo**:
  ```
  Valor da integral: 0.7468180015
  ```
- **Erro m√°ximo te√≥rico**:
  $$
  E \leq \frac{1}{12 \cdot 100^2} \cdot 2 = 1.6667 \times 10^{-5} < \frac{1}{6} \times 10^{-4}
  $$
- **Erro absoluto** (vs. valor de refer√™ncia ‚âà 0.746824):
  $$
  |0.7468180015 - 0.746824| \approx 5.999 \times 10^{-6}
  $$
  **Precis√£o garantida!** ‚úÖ
"""

import numpy as np

# Par√¢metros
n = 100       # Subintervalos calculados
a = 0         # Limite inferior
b = 1         # Limite superior
h = (b - a)/n # Largura dos trap√©zios

# Amostragem dos pontos
x = np.linspace(a, b, n+1)

# Fun√ß√£o integranda
def f(r):
    return np.exp(-r**2)

# C√°lculo da soma ponderada
integral = f(x[0]) + f(x[-1])  # Extremos f(a) + f(b)

for i in range(1, n):          # Termos internos (peso 2)
    integral += 2 * f(x[i])

integral *= h/2                # Fator de ajuste

print(f"Valor da integral: {integral:.10f}")

# code prof
import numpy as np

#dados
#quantidade de subintervalos
n=100

#limites de integra√ß√£o
a=0
b=1

#altura de cada trap√©zio
h=(b-a)/n

#amostra no eixo x:
x=np.linspace(a,b,n+1)

#amostra no eixo y:
y=np.exp(-x**2)

#defina a fun√ß√£o a ser integrada
def f(r):
    return np.exp(-r**2)

integral = 0
for i in range(1,n):
  integral = integral + 2*f(x[i])
integral = integral + f(x[0]) + f(x[n])
integral = integral*h/2
print(integral)